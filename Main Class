

            while (!goodGroups) {
                Scanner scanGroups = new Scanner(System.in);

                System.out.println(" ");
                System.out.println("Please type number of groups.");

                if (scanGroups.hasNextInt()){
                    userGroups = scanGroups.nextInt();
                }
                else if (scanGroups.next() == "EXIT"){
                    System.exit(0);
                }
                else {
                    System.out.println("ERROR: Please type only integer values.");
                }
                calcSDev.setNumberOfGroups(userGroups);

                if (calcSDev.getNumberOfGroups() != INVALID) {
                    goodGroups = true;
                }
                else {
                    goodGroups = false;
                    System.out.println("ERROR: Invalid Groups. Note- Your Minimum is included.");
                    System.out.println("If your Minimum or Maximum is incorrect, please exit by typing EXIT and try again.");
                }

            }

        }


        String userFileName;

        // Creates String named userFileName

        int someInt;

        System.out.println("");
        System.out.println("Please type in the file name\n");

        // Prompts user for file name

        Scanner scanSystemIn = new Scanner(System.in);
        userFileName = scanSystemIn.next();

        // Creates scanner to read file


        System.out.println("\nThe user input: " + userFileName);


        try {

            File userFile = new File(userFileName);
            Scanner scanUserFile = new Scanner(userFile);
            boolean fileDone = false;

            while (!fileDone) {

                if (scanUserFile.hasNext()) {

                    someInt = scanUserFile.nextInt();

                    // Scans next int in file

                    calcSDev.addNewDataItem(someInt);

                    // Reads file into method addNewDataItem
                    if ((methodType == DISCRETE) && (calcSDev.getNumberOfDataItems() >= MAXDATA)) {
                        System.out.print("\n\nData in file exceeds MAXDATA limit \n\n");
                        scanUserFile.close();
                        fileDone = true;
                    }

                } else{
                    System.out.print("\n\nDataFileFILE has been completely READ\n\n");
                    scanUserFile.close();
                    fileDone = true;
                }



            }
        }catch (FileNotFoundException e) {
            System.out.println(e);
            e.printStackTrace();

            // If file is not found prompt user and stacktrace file
        }


        double NumItems = calcSDev.getNumberOfDataItems();
        double mean = calcSDev.calcAverage();
        double FinVar = calcSDev.calcVariance();
        double Sdev = calcSDev.calcStandardDeviation();
        double lower68 = mean - Sdev;
        double higher68 = mean + Sdev;
        double lower95 = lower68 - Sdev;
        double higher95 = higher68 + Sdev;
        double lower99 = lower95 - Sdev;
        double higher99 = higher95 + Sdev;

        // Making variables to print into console


        System.out.printf("# of Observations:....... %10.0f ", NumItems);
        System.out.println();

        System.out.printf("Mean:.................... %10.4f ", mean);
        System.out.println();

        System.out.printf("Variance:................ %10.4f ", FinVar);
        System.out.println();

        System.out.printf("Standard Deviation:...... %10.4f\n ", Sdev);
        System.out.println();

        System.out.printf("68%% of the Data is:\t %10.4f   <   x  < %10.4f", lower68,higher68 );
        System.out.println();

        System.out.printf("95%% of the Data is:\t %10.4f   <   x  < %10.4f", lower95,higher95 );
        System.out.println();

        System.out.printf("99%% of the Data is:\t %10.4f   <   x  < %10.4f", lower99,higher99 );
        System.out.println();

        // Print all information / calculations



    }//end method
}//end class

